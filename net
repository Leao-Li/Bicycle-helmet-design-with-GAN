from torch import nn # neural network module of Pytorch


class NetG(nn.Module):
    """Generative Model: Generator"""
    
    def __init__(self, opt):
        super(NetG, self).__init__()
        ngf = opt.ngf # the number of feature map, which is Generator, ngf==64
        
        self.main = nn.Sequential(
                # ConvTranspose 1: input is noize which is n dimention  输入: 1x100x1x1　(NxCxHxW) 100维的噪声向量
                nn.ConvTranspose2d(opt.nz, ngf * 16, kernel_size=8, stride=2, padding=1, dilation=1, bias=False),
                # nn.BatchNorm2d(ngf * 16), #对通道进行批量归一化
                # nn.ReLU(True),
                nn.SELU(),
                # last step output: (ngf*16)*6*6
                
                # ConvTranspose 2
                nn.ConvTranspose2d(ngf * 16, ngf *8, kernel_size=8, stride=2, padding=2, dilation=1, bias=False),
                # nn.BatchNorm2d(ngf * 8),
                # nn.ReLU(True),
                nn.SELU(),
                # output of the last step: (ngf *8) * 14 * 14
                
                # ConvTranspose 3
                nn.ConvTranspose2d(ngf * 8, ngf * 4, kernel_size=8, stride=2, padding=2, dilation=1, bias=False),
                # nn.BatchNorm2d(ngf * 4),
                # nn.ReLU(True),
                nn.SELU(),
                # output of the last step: (ngf*4) * 30 * 30
                
                # ConvTranspose 4
                nn.ConvTranspose2d(ngf * 4, ngf*2, kernel_size=8, stride=2, padding=2, dilation=1, bias=False),
                # nn.BatchNorm2d(ngf*2),
                # nn.ReLU(True),
                nn.SELU(),
                # the output of the last step: (ngf*2) * 62 * 62
                
                # ConvTranspose 5
                nn.ConvTranspose2d(ngf*2, ngf, kernel_size=8, stride=2, padding=2, dilation=1, bias=False),
                # nn.BatchNorm2d(ngf),
                # nn.ReLU(True),
                nn.SELU(),
                # the output size the last step: ngf * 126 * 126 
                
                # ConvTranspose 6
                nn.ConvTranspose2d(ngf, 3, kernel_size=8, stride=2, padding=1, dilation=1, bias=False),
                nn.Tanh() # the output range: -1~1, so we using Tanh function
                # the output size: 3 * 256 * 256  输出: 1x3x256x256 3(Channels)x256(Height)x256(Width)的图像
                )
    
    def forward(self, input):
        return self.main(input)
        
    
class NetD(nn.Module):
    """
    Discriminative Model
    """
        
    def __init__(self, opt):
        super(NetD, self).__init__()
        ndf = opt.ndf # the number of feature map, which is Discrimator, ndf==64
        self.main = nn.Sequential(
                # Conv2d_1:input size: 3 * 256 * 256  
                nn.Conv2d(3, ndf, kernel_size=7, stride=2, padding=1, dilation=1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
                # output: (ndf) * 126 * 126helmet
                
                # Conv2d_2
                nn.Conv2d(ndf, ndf * 2, kernel_size=6, stride=2, padding=1, dilation=1, bias=False),
                nn.BatchNorm2d(ndf * 2),
                nn.LeakyReLU(0.2, inplace=True),
                # output: (ndf*2) * 62 * 62
                
                # Conv2d_3
                nn.Conv2d(ndf * 2, ndf * 4, kernel_size=6, stride=2, padding=1, dilation=1, bias=False),
                nn.BatchNorm2d(ndf * 4),
                nn.LeakyReLU(0.2, inplace=True),
                #output:(ndf*4) * 30 * 30
                
                # Conv2d_4
                nn.Conv2d(ndf * 4, ndf * 8, kernel_size=6, stride=2, padding=1, dilation=1, bias=False),
                nn.BatchNorm2d(ndf * 8),
                nn.LeakyReLU(0.2, inplace=True),
                # output: (ndf*8) * 14 * 14
                
                # Conv2d_5
                nn.Conv2d(ndf * 8, ndf * 16, kernel_size=6, stride=2, padding=1, dilation=1, bias=False),
                nn.BatchNorm2d(ndf * 16),
                nn.LeakyReLU(0.2, inplace=True),
                # output: (ndf*16) * 6 * 6
                
                nn.Conv2d(ndf * 16, 1, kernel_size=7, stride=2, padding=1, dilation=1, bias=False),
                nn.Sigmoid() # output a number, which is probability 
                )
        
    def forward(self, input):
        return self.main(input).view(-1)
